#!/usr/bin/env python3

import os
import json
import subprocess

print("Starting configuration...")
config_dir = os.path.join(os.environ['SNAP_COMMON'], 'conf')

def translate_config_snap_to_coda(obj):
    if isinstance(obj, dict):
        new_obj = {}
        for k, v in obj.items():
            new_key = k.replace("-", "_")
            new_obj[new_key] = translate_config_snap_to_coda(v)
        return new_obj
    elif isinstance(obj, list):
        for i in range(len(obj)):
            obj[i] = translate_config_snap_to_coda(obj[i])
        return obj
    else:
        return obj

def snapctl_get(key):
    result = subprocess.run(['snapctl', 'get', key], capture_output=True, text=True)
    if result.returncode != 0:
        raise RuntimeError(f"Failed to get snap configuration for key: {key}")
    return result.stdout.strip()

def save_json(path, data):
    print(f"Writing configuration to {path}")
    with open(path, 'w') as f:
        json_str = json.dumps(data, indent=4)
        print(json_str)
        f.write(json_str)
        print(f"Data saved to {path}")

# Prepare bootstrap.json
bootstrap_path = os.path.join(config_dir, 'bootstrap.json')
bootstrap_coda_str = snapctl_get('bootstrap')
bootstrap_coda_json = json.loads(bootstrap_coda_str)
bootstrap_coda_config = translate_config_snap_to_coda(bootstrap_coda_json)
save_json(bootstrap_path, bootstrap_coda_config)

# Prepare conf.json
conf_path = os.path.join(config_dir, 'conf.json')
conf_coda_str = snapctl_get('conf')
conf_coda_json = json.loads(conf_coda_str)
conf_coda_config = translate_config_snap_to_coda(conf_coda_json)
save_json(conf_path, conf_coda_config)

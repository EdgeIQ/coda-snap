#!/usr/bin/env python3

import os
import sys
import json
import logging

sys.path.append(os.path.join(os.environ['SNAP'], 'shared'))

import hook_utils

# Setup logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

logging.info("Starting configuration...")

config_dir = os.path.join(os.environ['SNAP_COMMON'], 'conf')

def normalize_bootstrap_config(config_json):
    """
    Normalizes the bootstrap configuration by translating keys and handling identifier data.
    """
    translated_config = hook_utils.translate_config_snap_to_coda(config_json)
    identifier_filepath = translated_config.get('identifier_filepath')
    company_id = translated_config.get('company_id')
    unique_id = translated_config.get('unique_id')
    
    if (not identifier_filepath or identifier_filepath == "") and company_id and unique_id:
        identifier_data = {
            'company_id': company_id,
            'unique_id': unique_id
        }

        identifier_filepath = os.path.join(config_dir, 'identifier.json')
        hook_utils.save_json(identifier_filepath, identifier_data)
        translated_config['identifier_filepath'] = identifier_filepath
        if 'unique_id' in translated_config:
            del translated_config['unique_id']

    return translated_config

def process_configuration(file_name, snap_key, normalize_func=None):
    """
    Processes a configuration file: gets the configuration from snapctl, translates keys,
    normalizes if needed, and saves it to the specified path.
    """
    file_path = os.path.join(config_dir, file_name)
    snap_config_str = hook_utils.snapctl_get(snap_key)
    snap_config_json = json.loads(snap_config_str)
    if normalize_func:
        snap_config_json = normalize_func(snap_config_json)
    else:
        snap_config_json = hook_utils.translate_config_snap_to_coda(snap_config_json)
    hook_utils.save_json(file_path, snap_config_json)

# Prepare bootstrap.json
process_configuration('bootstrap.json', 'bootstrap', normalize_func=normalize_bootstrap_config)

# Prepare conf.json
process_configuration('conf.json', 'conf')
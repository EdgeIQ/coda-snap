#!/usr/bin/env python3

import sys
import os
import logging

sys.path.append(os.path.join(os.environ['SNAP'], 'shared'))

import hook_utils

# Setup logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')

logging.info("Starting installation...")

src_conf_dir = os.path.join(os.environ['SNAP'], 'conf')
dst_config_dir = os.path.join(os.environ['SNAP_COMMON'], 'conf')

def translate_config_coda_to_snap(obj):
    """
    Recursively translates configuration keys from coda style (underscore) to snap style (dash).
    """
    if isinstance(obj, dict):
        new_obj = {k.replace("_", "-"): translate_config_coda_to_snap(v) for k, v in obj.items()}
        return new_obj
    elif isinstance(obj, list):
        return [translate_config_coda_to_snap(i) for i in obj]
    else:
        return obj

def process_configuration(file_name, snap_key, translate_func):
    """
    Processes a configuration file: loads it, translates keys, and sets it using snapctl.
    """
    file_path = os.path.join(src_conf_dir, file_name)
    coda_config = hook_utils.load_json(file_path)
    snap_config = translate_func(coda_config)
    hook_utils.snapctl_set(snap_key, snap_config)

# Copy the default configuration files to the persistent and writable area
logging.info("Copying configuration files...")
hook_utils.copy_configuration_files(src_conf_dir, dst_config_dir)

# Set the default values for the snap
logging.info("Setting default values...")

# Handle bootstrap.json and conf.json using the universal function
process_configuration('bootstrap.json', 'bootstrap', translate_config_coda_to_snap)
process_configuration('conf.json', 'conf', translate_config_coda_to_snap)